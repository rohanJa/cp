import java.io.DataInputStream; 
import java.io.FileInputStream; 
import java.io.IOException; 
import java.io.InputStreamReader; 
import java.util.Scanner; 
import java.util.StringTokenizer; 
import java.util.*;


class LazySegmentTree
{

	static class Reader 
    { 
        final private int BUFFER_SIZE = 1 << 16; 
        private DataInputStream din; 
        private byte[] buffer; 
        private int bufferPointer, bytesRead; 
  
        public Reader() 
        { 
            din = new DataInputStream(System.in); 
            buffer = new byte[BUFFER_SIZE]; 
            bufferPointer = bytesRead = 0; 
        } 
  
        public Reader(String file_name) throws IOException 
        { 
            din = new DataInputStream(new FileInputStream(file_name)); 
            buffer = new byte[BUFFER_SIZE]; 
            bufferPointer = bytesRead = 0; 
        } 
  
        public String readLine() throws IOException 
        { 
            byte[] buf = new byte[64]; // line length 
            int cnt = 0, c; 
            while ((c = read()) != -1) 
            { 
                if (c == '\n') 
                    break; 
                buf[cnt++] = (byte) c; 
            } 
            return new String(buf, 0, cnt); 
        } 
  
        public int nextInt() throws IOException 
        { 
            int ret = 0; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
            do
            { 
                ret = ret * 10 + c - '0'; 
            }  while ((c = read()) >= '0' && c <= '9'); 
  
            if (neg) 
                return -ret; 
            return ret; 
        } 
  
        public long nextLong() throws IOException 
        { 
            long ret = 0; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
            do { 
                ret = ret * 10 + c - '0'; 
            } 
            while ((c = read()) >= '0' && c <= '9'); 
            if (neg) 
                return -ret; 
            return ret; 
        } 
  
        public double nextDouble() throws IOException 
        { 
            double ret = 0, div = 1; 
            byte c = read(); 
            while (c <= ' ') 
                c = read(); 
            boolean neg = (c == '-'); 
            if (neg) 
                c = read(); 
  
            do { 
                ret = ret * 10 + c - '0'; 
            } 
            while ((c = read()) >= '0' && c <= '9'); 
  
            if (c == '.') 
            { 
                while ((c = read()) >= '0' && c <= '9') 
                { 
                    ret += (c - '0') / (div *= 10); 
                } 
            } 
  
            if (neg) 
                return -ret; 
            return ret; 
        } 
  
        private void fillBuffer() throws IOException 
        { 
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE); 
            if (bytesRead == -1) 
                buffer[0] = -1; 
        } 
  
        private byte read() throws IOException 
        { 
            if (bufferPointer == bytesRead) 
                fillBuffer(); 
            return buffer[bufferPointer++]; 
        } 
  
        public void close() throws IOException 
        { 
            if (din == null) 
                return; 
            din.close(); 
        } 
    } 

	int[] st;
	int[] lazy;

	int getMid(int s, int e){
		return s + (e-s)/2;
	}

	int constructTreeUtil(int[] ar, int ss, int se, int si) {

		if(ss==se){
			st[si] = ar[ss];
			return st[si];
		}

		int mid = getMid(ss,se);
		st[si] = constructTreeUtil(ar, ss, mid, si*2+1) + constructTreeUtil(ar, mid+1, se, si*2+2);
		return st[si];
	}

	LazySegmentTree(int[] ar, int n)
	{
		int x = (int)Math.ceil(Math.log(n)/Math.log(2));
		int size = 2*(int)Math.pow(2,x) - 1;

		st = new int[size];
		lazy = new int[size];

		constructTreeUtil(ar, 0, n-1, 0);
	}

	int getSumUtil(int ss, int se, int qs, int qe, int si){

		if(qs>se || qe<ss)
			return 0;

		if(lazy[si] == 1) {

			st[si] = se - ss + 1 - st[si]; //setting the heads

			if(ss!=se){
				//marking children
				lazy[si*2 + 1] = 1 - lazy[si*2+1];
				lazy[si*2 + 2] = 1 - lazy[si*2+2];
			}

			lazy[si] = 0;
		}

		if(qs<=ss && qe>=se)
			return st[si];

		
		int mid = getMid(ss,se);
		return getSumUtil(ss, mid, qs, qe, si*2+1) + getSumUtil(mid+1, se, qs, qe, si*2+2);
	}

	int getSum(int n, int qs, int qe){

		return getSumUtil(0, n-1, qs, qe, 0);
	}

	void updateValUtil(int ss, int se, int qs, int qe, int si){

		if(ss>se || qs>qe)
			return;

		
		if(lazy[si] == 1) {
			//update the node
			st[si] = se - ss + 1 - st[si];

			if(ss != se) {
				lazy[si*2+1] = 1 - lazy[si*2+1];
				lazy[si*2+2] = 1 - lazy[si*2+2];
			}
			lazy[si] = 0;
		}

		if(qs>se || qe<ss){
			return;
		}		

		if(qs<=ss && qe >= se) {

			st[si] = (se - ss + 1) - st[si];
			if(ss != se) {
				lazy[si*2+1] = 1 - lazy[si*2+1];
				lazy[si*2+2] = 1 - lazy[si*2+2];
			}
			return;
		}

		int mid = getMid(ss, se);
		updateValUtil(ss, mid, qs, qe, si*2+1);
		updateValUtil(mid+1, se, qs, qe, si*2+2);

		st[si] = st[si*2+1] + st[si*2+2];
	}

	void updateVal(int n, int qs, int qe) {

		updateValUtil(0, n-1, qs, qe, 0);
	}

	

	public static void main(String[] args) throws Exception{
		Reader sc = new Reader();
		int n = sc.nextInt();
		int q = sc.nextInt();

		int[] ar = new int[n];
		//0 for tail up
		//1 for head up
		Arrays.fill(ar,0);

		LazySegmentTree lstree = new LazySegmentTree(ar, n);

		for(int i=0;i<q;i++){
			int x = sc.nextInt();
			int a = sc.nextInt();
			int b = sc.nextInt();

			if(x==0){
				//System.out.println(lstree.st.length);
				
				lstree.updateVal(n, a, b);
				// for(int k:lstree.st){
				// 	System.out.print(k + " ");
				// }

			}

			else if(x==1){
				System.out.println(lstree.getSum(n, a, b));
			}
		}
	}
}
